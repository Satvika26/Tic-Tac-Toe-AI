import tkinter as tk
import math

def check_winner(board):
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != " ":
            return row[0]
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != " ":
            return board[0][col]
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != " ":
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != " ":
        return board[0][2]
    return None

def is_moves_left(board):
    return any(" " in row for row in board)

def minimax(board, depth, is_max):
    winner = check_winner(board)
    if winner == "X":
        return -10 + depth
    elif winner == "O":
        return 10 - depth
    elif not is_moves_left(board):
        return 0
    
    if is_max:
        best = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    best = max(best, minimax(board, depth + 1, False))
                    board[i][j] = " "
        return best
    else:
        best = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    best = min(best, minimax(board, depth + 1, True))
                    board[i][j] = " "
        return best

def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                move_val = minimax(board, 0, False)
                board[i][j] = " "
                if move_val > best_val:
                    best_val = move_val
                    best_move = (i, j)
    return best_move

def on_click(row, col):
    global player_turn
    if board[row][col] == " " and player_turn:
        board[row][col] = "X"
        buttons[row][col].config(text="X", bg="lightblue")
        player_turn = False
        check_game_state()
        if not player_turn:
            ai_move()

def ai_move():
    global player_turn
    row, col = find_best_move(board)
    if row != -1 and col != -1:
        board[row][col] = "O"
        buttons[row][col].config(text="O", bg="lightcoral") # type: ignore
    player_turn = True
    check_game_state()

def check_game_state():
    winner = check_winner(board)
    if winner:
        status_label.config(text=f"{winner} wins!", fg="green")
        disable_buttons()
    elif not is_moves_left(board):
        status_label.config(text="It's a draw!", fg="orange")
        disable_buttons()

def disable_buttons():
    for i in range(3):
        for j in range(3):
            buttons[i][j].config(state=tk.DISABLED) # type: ignore

def reset_game():
    global board, player_turn
    board = [[" " for _ in range(3)] for _ in range(3)]
    player_turn = True
    status_label.config(text="Your turn", fg="black")
    for i in range(3):
        for j in range(3):
            buttons[i][j].config(text="", bg="white", state=tk.NORMAL) # type: ignore

root = tk.Tk()
root.title("Tic-Tac-Toe AI")
root.configure(bg="lightgray")
board = [[" " for _ in range(3)] for _ in range(3)]
player_turn = True
buttons = [[None for _ in range(3)] for _ in range(3)]

for i in range(3):
    for j in range(3):
        buttons[i][j] = tk.Button(root, text="", font=("Arial", 20), height=2, width=5, bg="white", command=lambda i=i, j=j: on_click(i, j)) # type: ignore
        buttons[i][j].grid(row=i, column=j, padx=5, pady=5) # type: ignore

status_label = tk.Label(root, text="Your turn", font=("Arial", 14), bg="lightgray", fg="black")
status_label.grid(row=3, column=0, columnspan=3)

reset_button = tk.Button(root, text="Restart", font=("Arial", 14), bg="yellow", command=reset_game)
reset_button.grid(row=4, column=0, columnspan=3, pady=10)

root.mainloop()
